/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package awaball;

import awaball.classes.HachageVerifyHaches;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author Awa Ball
 */
public class Hachage extends javax.swing.JInternalFrame {

    /**
     * Creates new form GenerationCles
     */
    public Hachage() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI b = (BasicInternalFrameUI) this.getUI();
        b.setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        algorithme = new javax.swing.JComboBox<>();
        messageUpload = new javax.swing.JButton();
        message = new javax.swing.JTextField();
        hachage = new javax.swing.JButton();
        verify = new javax.swing.JButton();
        option = new javax.swing.JComboBox<>();
        hacheUpload = new javax.swing.JButton();
        hache = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(890, 608));

        algorithme.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        algorithme.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Algorithme ", "MD5", "SHA-1", "SHA-256", "SHA-512" }));
        algorithme.setEnabled(false);
        algorithme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmeActionPerformed(evt);
            }
        });

        messageUpload.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        messageUpload.setText("Selectionner le message");
        messageUpload.setEnabled(false);
        messageUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageUploadActionPerformed(evt);
            }
        });

        message.setEditable(false);
        message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageActionPerformed(evt);
            }
        });

        hachage.setBackground(new java.awt.Color(0, 102, 255));
        hachage.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        hachage.setForeground(new java.awt.Color(255, 255, 255));
        hachage.setText("Hacher");
        hachage.setEnabled(false);
        hachage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hachageActionPerformed(evt);
            }
        });

        verify.setBackground(new java.awt.Color(0, 51, 255));
        verify.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        verify.setForeground(new java.awt.Color(255, 255, 255));
        verify.setText("Verifier");
        verify.setEnabled(false);
        verify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyActionPerformed(evt);
            }
        });

        option.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        option.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Options ", "Hachage", "Verification des Hachés" }));
        option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionActionPerformed(evt);
            }
        });

        hacheUpload.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        hacheUpload.setText("Selectionner le haché");
        hacheUpload.setEnabled(false);
        hacheUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hacheUploadActionPerformed(evt);
            }
        });

        hache.setEditable(false);
        hache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hacheActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(hachage, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(verify, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                            .addComponent(option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hache))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(algorithme, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(messageUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hacheUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(90, 90, 90))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(option, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(algorithme, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(messageUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hache, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hacheUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verify, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hachage, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void algorithmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_algorithmeActionPerformed

    private void messageUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageUploadActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(jPanel1);
        File file = fileChooser.getSelectedFile();
        String fichier = file.getAbsolutePath();
        message.setText(fichier);

    }//GEN-LAST:event_messageUploadActionPerformed

    private void messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageActionPerformed

    private void optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionActionPerformed
        // TODO add your handling code here:
        if (option.getSelectedItem().equals("Hachage")){
            hacheUpload.setEnabled(false);
            hache.setEnabled(false);
            algorithme.setEnabled(true);
            messageUpload.setEnabled(true);
            message.setEnabled(true);
            hachage.setEnabled(true);
            verify.setEnabled(false);

        }
        else if (option.getSelectedItem().equals("Verification des Hachés")){
            hacheUpload.setEnabled(true);
            hache.setEnabled(true);
            algorithme.setEnabled(true);
            messageUpload.setEnabled(true);
            message.setEnabled(true);
            verify.setEnabled(true);
            hachage.setEnabled(false);
        }
        else{
            hacheUpload.setEnabled(false);
            hache.setEnabled(false);
            algorithme.setEnabled(false);
            messageUpload.setEnabled(false);
            message.setEnabled(false);
            verify.setEnabled(false);
            hachage.setEnabled(false);
        }
    }//GEN-LAST:event_optionActionPerformed

    private void hacheUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hacheUploadActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(jPanel1);
        File file = fileChooser.getSelectedFile();
        String path =  file.getAbsolutePath();
        hache.setText(path);
    }//GEN-LAST:event_hacheUploadActionPerformed

    private void hacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hacheActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hacheActionPerformed

    private void hachageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hachageActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showSaveDialog(jPanel1);
        File file = fileChooser.getSelectedFile();
        String path =  file.getAbsolutePath();
        String mess = message.getText();
        String algo = (String) algorithme.getSelectedItem();
        try {
            HachageVerifyHaches.hashDigest(algo, mess, path);
            JOptionPane.showMessageDialog(rootPane, "Message Haché");
        } catch (Exception ex) {
            Logger.getLogger(Signature.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_hachageActionPerformed

    private void verifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyActionPerformed
        // TODO add your handling code here:
        String mess = message.getText();
        String algo = (String) algorithme.getSelectedItem();
        String empreinte = hache.getText();
        
        try {
            boolean verify = HachageVerifyHaches.comparerHash(algo, empreinte, mess);
            if (verify){
                JOptionPane.showMessageDialog(rootPane, "La verification est correcte");
            }
            else{
               JOptionPane.showMessageDialog(rootPane, "La verification est fausse"); 
            }
            
        } catch (Exception ex) {
            Logger.getLogger(Signature.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_verifyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algorithme;
    private javax.swing.JButton hachage;
    private javax.swing.JTextField hache;
    private javax.swing.JButton hacheUpload;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField message;
    private javax.swing.JButton messageUpload;
    private javax.swing.JComboBox<String> option;
    private javax.swing.JButton verify;
    // End of variables declaration//GEN-END:variables
}
