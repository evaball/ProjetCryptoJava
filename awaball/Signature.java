/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package awaball;

import awaball.classes.SignatureVerifySign;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author Awa Ball
 */
public class Signature extends javax.swing.JInternalFrame {

    /**
     * Creates new form GenerationCles
     */
    public Signature() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI b = (BasicInternalFrameUI) this.getUI();
        b.setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        messageUpload = new javax.swing.JButton();
        message = new javax.swing.JTextField();
        keyUpload = new javax.swing.JButton();
        key = new javax.swing.JTextField();
        algo = new javax.swing.JComboBox<>();
        sign = new javax.swing.JButton();
        option = new javax.swing.JComboBox<>();
        hacheUpload = new javax.swing.JButton();
        hache = new javax.swing.JTextField();
        verify = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(890, 608));

        messageUpload.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        messageUpload.setText("Selectionner le message");
        messageUpload.setEnabled(false);
        messageUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageUploadActionPerformed(evt);
            }
        });

        message.setEditable(false);
        message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageActionPerformed(evt);
            }
        });

        keyUpload.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        keyUpload.setText("Selectionner la clé");
        keyUpload.setEnabled(false);
        keyUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyUploadActionPerformed(evt);
            }
        });

        key.setEditable(false);
        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });

        algo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        algo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Algorithme ", "SHA1WithRSA", "SHA256WithRSA", "DSA", "SHA1WithDSA", " ", " " }));
        algo.setEnabled(false);
        algo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algoActionPerformed(evt);
            }
        });

        sign.setBackground(new java.awt.Color(0, 102, 255));
        sign.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        sign.setForeground(new java.awt.Color(255, 255, 255));
        sign.setText("Signer");
        sign.setEnabled(false);
        sign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signActionPerformed(evt);
            }
        });

        option.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        option.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Options ", "Signature", "Verification de la Signature" }));
        option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionActionPerformed(evt);
            }
        });

        hacheUpload.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        hacheUpload.setText("Selectionner le signé");
        hacheUpload.setEnabled(false);
        hacheUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hacheUploadActionPerformed(evt);
            }
        });

        hache.setEditable(false);
        hache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hacheActionPerformed(evt);
            }
        });

        verify.setBackground(new java.awt.Color(0, 51, 255));
        verify.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        verify.setForeground(new java.awt.Color(255, 255, 255));
        verify.setText("Verifier");
        verify.setEnabled(false);
        verify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(message)
                    .addComponent(option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hache)
                    .addComponent(key))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(algo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(messageUpload, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hacheUpload, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyUpload, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sign, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(verify, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(218, 218, 218))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(option, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(algo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(messageUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hacheUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hache, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sign, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verify, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void messageUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageUploadActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(jPanel1);
        File file = fileChooser.getSelectedFile();
        String fichier = file.getAbsolutePath();
        message.setText(fichier);

    }//GEN-LAST:event_messageUploadActionPerformed

    private void messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageActionPerformed

    private void keyUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyUploadActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(jPanel1);
        File file = fileChooser.getSelectedFile();
        String cle = file.getAbsolutePath();
        key.setText(cle);
    }//GEN-LAST:event_keyUploadActionPerformed

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_keyActionPerformed

    private void algoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_algoActionPerformed

    private void signActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showSaveDialog(jPanel1);
        File file = fileChooser.getSelectedFile();
        String path =  file.getAbsolutePath();
        String mess = message.getText();
        String clef = key.getText();
        String algorithme = (String) algo.getSelectedItem();
        try {
            SignatureVerifySign.signatureFichier(mess, path,algorithme, clef);
            JOptionPane.showMessageDialog(rootPane, "Message signé");
        } catch (Exception ex) {
            Logger.getLogger(Signature.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_signActionPerformed

    private void optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionActionPerformed
        // TODO add your handling code here:
        if (option.getSelectedItem().equals("Signature")){
            keyUpload.setText("Clé Privée");
            hacheUpload.setEnabled(false);
            hache.setEnabled(false);
            keyUpload.setEnabled(true);
            key.setEnabled(true);
            algo.setEnabled(true);
            messageUpload.setEnabled(true);
            message.setEnabled(true);
            sign.setEnabled(true);
            verify.setEnabled(false);
            
        }
        else if (option.getSelectedItem().equals("Verification de la Signature")){
            keyUpload.setText("Clé Publique");
            hacheUpload.setEnabled(true);
            hache.setEnabled(true);
            keyUpload.setEnabled(true);
            key.setEnabled(true);
            algo.setEnabled(true);
            messageUpload.setEnabled(true);
            message.setEnabled(true);
            verify.setEnabled(true);
            sign.setEnabled(false);
        }
        else{
            hacheUpload.setEnabled(false);
            hache.setEnabled(false);
            algo.setEnabled(false);
            messageUpload.setEnabled(false);
            message.setEnabled(false);
            keyUpload.setEnabled(false);
            key.setEnabled(false);
            verify.setEnabled(false);
            sign.setEnabled(false);
        }
    }//GEN-LAST:event_optionActionPerformed

    private void hacheUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hacheUploadActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(jPanel1);
        File file = fileChooser.getSelectedFile();
        String fichier = file.getAbsolutePath();
        hache.setText(fichier);
    }//GEN-LAST:event_hacheUploadActionPerformed

    private void hacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hacheActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hacheActionPerformed

    private void verifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyActionPerformed
        // TODO add your handling code here:
        String mess = message.getText();
        String clef = key.getText();
        String algorithme = (String) algo.getSelectedItem();
        String empreinte = hache.getText();
        
        try {
            boolean verify = SignatureVerifySign.verifierSignature(mess, empreinte, algorithme, clef);
            if (verify){
                JOptionPane.showMessageDialog(rootPane, "La verification est correcte");
            }
            else{
               JOptionPane.showMessageDialog(rootPane, "La verification est fausse"); 
            }
            
        } catch (Exception ex) {
            Logger.getLogger(Signature.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_verifyActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algo;
    private javax.swing.JTextField hache;
    private javax.swing.JButton hacheUpload;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField key;
    private javax.swing.JButton keyUpload;
    private javax.swing.JTextField message;
    private javax.swing.JButton messageUpload;
    private javax.swing.JComboBox<String> option;
    private javax.swing.JButton sign;
    private javax.swing.JButton verify;
    // End of variables declaration//GEN-END:variables
}
